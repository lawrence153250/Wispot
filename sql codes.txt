CREATE TABLE admin (
    adminId INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    fullName VARCHAR(200) NOT NULL,
    registerDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    userName VARCHAR(100) UNIQUE,
    accountStatus ENUM('active', 'locked', 'blocked') DEFAULT 'active',
    failed_attempts INT DEFAULT 0,
    lockout_until DATETIME DEFAULT NULL,
    lockout_count INT DEFAULT 0
);

INSERT INTO admin (
    email, 
    password, 
    fullName, 
    userName,
    accountStatus
)
VALUES (
    'admin@example.com', 
    '$2y$10$yYD152gdMbcaFStXOqkFMuzs1n2eVelSUS1NgRQLh1gcpTgWKkSrW',
    'Admin', 
    'admin',
    'active'
);

CREATE TABLE staff (
    staffId INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    fullName VARCHAR(200) NOT NULL,
    position VARCHAR(100),
    registerDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    adminId INT,
    userName VARCHAR(100) UNIQUE,
    accountStatus ENUM('active', 'locked', 'blocked') DEFAULT 'active',
    failed_attempts INT DEFAULT 0,
    lockout_until DATETIME DEFAULT NULL,
    lockout_count INT DEFAULT 0,
    FOREIGN KEY (adminId) REFERENCES admin(adminId) ON DELETE SET NULL
);

CREATE TABLE customer (
    customerId INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    firstName VARCHAR(100) NOT NULL,
    lastName VARCHAR(100) NOT NULL,
    contactNumber VARCHAR(20) NOT NULL,
    address TEXT,
    birthday DATE,
    validId LONGBLOB,
    profileImage LONGBLOB, 
    proofOfBilling LONGBLOB,
    idNumber VARCHAR(50) UNIQUE,
    facebookProfile VARCHAR(255),
    registerDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    userName VARCHAR(100) UNIQUE,
    accountStatus ENUM('active', 'locked', 'blocked') DEFAULT 'active',
    accountVerification ENUM('verified', 'pending', 'not verified') DEFAULT 'pending',
    emailVerification ENUM('verified', 'unverified') DEFAULT 'unverified',
    failed_attempts INT DEFAULT 0,
    lockout_until DATETIME DEFAULT NULL,
    lockout_count INT DEFAULT 0
);


CREATE TABLE announcement (
    announcementId INT AUTO_INCREMENT PRIMARY KEY,
    adminId INT,
    title VARCHAR(100) NOT NULL,
    category ENUM('Employee', 'Promotional', 'Regular', 'Maintenance', 'Event', 'Policy') NOT NULL,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    description TEXT,
    isPriority BOOLEAN DEFAULT FALSE,
    startDate TIMESTAMP NULL,
    endDate TIMESTAMP NULL,
    FOREIGN KEY (adminId) REFERENCES admin(adminId) ON DELETE SET NULL
);

CREATE TABLE package (
    packageId INT AUTO_INCREMENT PRIMARY KEY,
    staffId INT,
    packageName VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    equipmentsIncluded TEXT,
    status ENUM('pending', 'available', 'in_use', 'maintenance', 'rejected') DEFAULT 'pending',
    adminId INT,
    dateCreated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    approvalDate TIMESTAMP NULL,
    numberOfUsers INT,
    eventType ENUM('indoor', 'outdoor', 'concert', 'any') NOT NULL,
    eventAreaSize DECIMAL(10,2),
    expectedBandwidth DECIMAL(10,2),
    FOREIGN KEY (staffId) REFERENCES staff(staffId) ON DELETE SET NULL,
    FOREIGN KEY (adminId) REFERENCES admin(adminId) ON DELETE SET NULL
);

CREATE TABLE inventory (
    itemId INT AUTO_INCREMENT PRIMARY KEY,
    itemName VARCHAR(255) NOT NULL,
    itemType VARCHAR(100) NOT NULL,
    quantity INT NOT NULL DEFAULT 1,
    status ENUM('pending', 'available', 'in_use', 'maintenance', 'rejected') DEFAULT 'pending',
    description TEXT,
    staffId INT,
    adminId INT,
    dateAdded TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    dateApproved TIMESTAMP NULL,
    FOREIGN KEY (staffId) REFERENCES staff(staffId) ON DELETE SET NULL,
    FOREIGN KEY (adminId) REFERENCES admin(adminId) ON DELETE SET NULL
);



CREATE TABLE booking (
    bookingId INT AUTO_INCREMENT PRIMARY KEY,
    customerId INT,
    staffId INT,
    packageId INT,
    bookingRegId INT,
    dateOfBooking DATE NOT NULL,
    dateOfReturn DATE NOT NULL,
    eventLocation VARCHAR(255),
    lendingAgreement LONGBLOB,
    voucherCode VARCHAR(12) NULL,
    lastPaymentAmount DECIMAL(10,2) NULL,
    lastPaymentDate DATETIME NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    price DECIMAL(10,2) NOT NULL,
    paymentBalance DECIMAL(10,2) NOT NULL DEFAULT 0,
    bookingStatus ENUM('Pending', 'Confirmed', 'In-progress', 'Completed', 'Cancelled', 'For Approval') DEFAULT 'Pending',
    paymentStatus ENUM('Unpaid', 'Paid', 'Partially Paid', 'Refunded') DEFAULT 'Unpaid',
    cancelReason TEXT NULL, 
    connectionStatus ENUM('Connected', 'Connecting', 'Connection error') DEFAULT 'Connecting',
    FOREIGN KEY (customerId) REFERENCES customer(customerId) ON DELETE CASCADE,
    FOREIGN KEY (staffId) REFERENCES staff(staffId) ON DELETE SET NULL,
    FOREIGN KEY (packageId) REFERENCES package(packageId) ON DELETE CASCADE
);

CREATE TABLE booking_edits (
    editId INT AUTO_INCREMENT PRIMARY KEY,
    bookingId INT NOT NULL,
    original_data JSON NOT NULL,
    edited_data JSON NOT NULL,
    edit_status ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    processed_at TIMESTAMP NULL,
    FOREIGN KEY (bookingId) REFERENCES booking(bookingId) ON DELETE CASCADE
);

-- Create voucher_batch table
CREATE TABLE voucher_batch (
    batchId INT AUTO_INCREMENT PRIMARY KEY,
    staffId INT,
    voucherType ENUM(
        'Birthday', 
        'Referral', 
        'Returning Customer', 
        'Limited-Time',
        'First Rental',
        'Seasonal',
        'VIP',
        'Bundle',
        'Flash Sale'
    ) NOT NULL,
    voucherName VARCHAR(255) NOT NULL,
    description TEXT,
    discountRate DECIMAL(5,2) NOT NULL CHECK (discountRate BETWEEN 0 AND 100),
    startDate DATETIME NOT NULL,
    endDate DATETIME NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    approvalStatus ENUM('pending', 'approved', 'declined') DEFAULT 'pending',
    adminId INT,
    adminNotes TEXT,
    approvalDate DATETIME,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (staffId) REFERENCES staff(staffId) ON DELETE SET NULL,
    FOREIGN KEY (adminId) REFERENCES admin(adminId) ON DELETE SET NULL
);

-- Create voucher_code table with voucherType included
CREATE TABLE voucher_code (
    codeId INT AUTO_INCREMENT PRIMARY KEY,
    batchId INT NOT NULL,
    code VARCHAR(12) NOT NULL UNIQUE,
    voucherType ENUM(
        'Birthday', 
        'Referral', 
        'Returning Customer', 
        'Limited-Time',
        'First Rental',
        'Seasonal',
        'VIP',
        'Bundle',
        'Flash Sale'
    ),
    isGiven BOOLEAN DEFAULT FALSE,
    isUsed BOOLEAN DEFAULT FALSE,
    usedDate DATETIME,
    customerId INT,
    bookingId INT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (batchId) REFERENCES voucher_batch(batchId) ON DELETE CASCADE,
    FOREIGN KEY (customerId) REFERENCES customer(customerId) ON DELETE SET NULL,
    FOREIGN KEY (bookingId) REFERENCES booking(bookingId) ON DELETE SET NULL
);


CREATE TABLE feedback (
    feedbackId INT AUTO_INCREMENT PRIMARY KEY,
    customerId INT,
    bookingId INT,
    
    -- Rating metrics (1-5 scale)
    internet_speed TINYINT NOT NULL CHECK (internet_speed BETWEEN 1 AND 5),
    reliability TINYINT NOT NULL CHECK (reliability BETWEEN 1 AND 5),
    signal_strength TINYINT NOT NULL CHECK (signal_strength BETWEEN 1 AND 5),
    customer_service TINYINT NOT NULL CHECK (customer_service BETWEEN 1 AND 5),
    installation_service TINYINT NOT NULL CHECK (installation_service BETWEEN 1 AND 5),
    equipment_quality TINYINT NOT NULL CHECK (equipment_quality BETWEEN 1 AND 5),

    -- Feedback content
    overall_rating TINYINT NOT NULL CHECK (overall_rating BETWEEN 0 AND 5),
    photo LONGBLOB DEFAULT NULL,
    comment TEXT,
    response TEXT DEFAULT NULL COMMENT 'Staff response to customer feedback',
    
    -- Tracking fields
    sentiment VARCHAR(50),
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    responseDate TIMESTAMP NULL DEFAULT NULL COMMENT 'Date when staff responded',
    responseStatus ENUM('pending', 'responded') DEFAULT 'pending',
    displayStatus ENUM('display', 'hide', 'pending') DEFAULT 'pending',

    -- Foreign keys
    FOREIGN KEY (customerId) REFERENCES customer(customerId) ON DELETE CASCADE,
    FOREIGN KEY (bookingId) REFERENCES booking(bookingId) ON DELETE CASCADE,
    
    -- Optional index for faster queries on common filters
    INDEX (responseStatus),
    INDEX (customerId),
    INDEX (displayStatus)
);


CREATE TABLE otp_verification (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    otp_code VARCHAR(6) NOT NULL,
    expires_at DATETIME NOT NULL,
    is_verified TINYINT(1) DEFAULT 0,
    verified_at DATETIME NULL
);

CREATE TABLE visitor_counts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    visit_date DATE NOT NULL,
    page_visited VARCHAR(50) NOT NULL,
    visit_count INT DEFAULT 1,
    UNIQUE KEY (visit_date, page_visited)
);

CREATE TABLE contacts (
    id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(50) NOT NULL,
    subject VARCHAR(100) NOT NULL,
    message TEXT NOT NULL,
    submission_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('unread', 'read', 'responded') DEFAULT 'unread'
);

CREATE TABLE password_reset_tokens (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    token VARCHAR(64) NOT NULL,
    expires_at DATETIME NOT NULL,
    used TINYINT(1) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY (token)
);

INSERT INTO package (packageId, packageName, description, price, equipmentsIncluded, numberOfUsers, eventType, eventAreaSize, expectedBandwidth)
VALUES
(1, 'Basic Kit', 
 'Speed: 20 - 100 Mbps (Peak 250 Mbps)\nIndoor Coverage: 17m\nOutdoor Coverage: N/A\nIdeal for 10-20 active devices (up to 40-50 total).',
 1400.00,
 'Basic Router, Indoor Access Point (1x)', 
 50, 'indoor', 297.00, 100.00),

(2, 'Boost Kit', 
 'Speed: Up to 250 Mbps\nIndoor Coverage: 17m\nOutdoor Coverage: 200m (1 AP)\nIdeal for 20-40 active devices (up to 80-100 total).',
 1900.00,
 'Router, 1x Outdoor Access Point, Indoor Access Point', 
 100, 'outdoor', 497.00, 250.00),

(3, 'Robust Kit', 
 'Speed: Up to 300+ Mbps\nIndoor Coverage: 17m\nOutdoor Coverage: 600m (3 APs x 200m)\nIdeal for 40-70 active devices (up to 130-150 total).',
 4000.00,
 'Router, 3x Outdoor Access Points, Indoor Access Point', 
 150, 'outdoor', 897.00, 300.00),

(4, 'Advanced Kit', 
 'Speed: Up to 300+ Mbps\nIndoor Coverage: 17m\nOutdoor Coverage: 1000m (5 APs x 200m)\nIdeal for 70-100+ active devices (up to 200-250+ total).',
 5000.00,
 'Router, 5x Outdoor Access Points, Indoor AP, Hotspot Device', 
 250, 'outdoor', 1297.00, 300.00);